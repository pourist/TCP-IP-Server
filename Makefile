################################################################################
##                                   COLORS                                   ##
################################################################################
DEFAULT := \033[0;39m
RED     := \033[0;91m
GREEN   := \033[0;92m
YELLOW  := \033[0;93m
BLUE    := \033[0;94m
MAGENTA := \033[0;95m
CLEAR   := \033[2K\r

################################################################################
##                                 TCP SERVER                                 ##
################################################################################
NAME        := tcp_server_app
LIB         := tcpserver
RM          := rm -rf

################################################################################
##                                DIRECTORIES                                 ##
################################################################################
OBJ_DIR     := build/obj
LIB_DIR     := build/lib
BIN_DIR     := build/bin

INC_DIRS    := include
INCLUDE     := $(addprefix -I, $(INC_DIRS))

################################################################################
##                                    FLAGS                                   ##
################################################################################
CXX       := g++
CXXFLAGS  := -std=c++98 -Wall -Wextra -Werror -MMD -MP
LDLIBS    :=

# pthread on non-macOS
ifeq ($(shell uname), Darwin)
else
	LDLIBS += -pthread
endif

ifdef DEBUG
	CXXFLAGS += -fsanitize=address -fno-omit-frame-pointer -g3
else
	CXXFLAGS += -O2
endif

################################################################################
##                                   FILES                                     ##
################################################################################
# Split app vs lib
MAIN_SRC     := main.cpp
LIB_SOURCES  := core/TcpServerController.cpp db/TcpClientDbManager.cpp \
                services/TcpClientServiceManager.cpp services/TcpNewConnectionAcceptor.cpp \
                utils/network_utils.cpp core/server_app.cpp \
				config_temp/temp_pars_config.cpp

# Objects (mirrored under build/obj/)
APP_OBJECT   := $(OBJ_DIR)/$(MAIN_SRC:.cpp=.o)
LIB_OBJECTS  := $(addprefix $(OBJ_DIR)/,$(LIB_SOURCES:.cpp=.o))

# Header deps generated by -MMD -MP
DEPS         := $(APP_OBJECT:.o=.d) $(LIB_OBJECTS:.o=.d)

# Tests (explicit list; each becomes its own binary)
TEST_SOURCES := \
	test/utils/test_network_utils.cpp \
	test/core/test_TcpServerController.cpp \
	test/db/test_TcpClientDbManager.cpp \
	test/services/test_TcpClientServiceManager.cpp \
	test/services/test_TcpNewConnectionAcceptor.cpp \
	test/test.cpp 

TEST_BINARIES := $(patsubst test/%.cpp,$(BIN_DIR)/tests/%,$(TEST_SOURCES))

# Progress counters (cosmetic)
NUM_TO_COMPILE  := $(words $(APP_OBJECT) $(LIB_OBJECTS))
COMPILED_FILES  ?= 0
COMPILATION_PCT = $(shell [ $(NUM_TO_COMPILE) -gt 0 ] && expr $(COMPILED_FILES) \* 100 / $(NUM_TO_COMPILE) || echo 100)

################################################################################
##                                  TARGETS                                    ##
################################################################################
.PHONY: all app lib tests test clean fclean re
.NOTPARALLEL:

all: lib app

app: $(BIN_DIR)/$(NAME)

lib: $(LIB_DIR)/lib$(LIB).a

tests: $(TEST_BINARIES)

test: tests
	@set -e; \
	for t in $(TEST_BINARIES); do \
		printf "$(BLUE)[test]$(DEFAULT) running %s\n" "$$t"; \
		"$$t"; \
	done; \
	printf "$(GREEN)All tests passed$(DEFAULT)\n"

################################################################################
##                                 BUILD RULES                                 ##
################################################################################
# App binary
$(BIN_DIR)/$(NAME): $(APP_OBJECT) $(LIB_DIR)/lib$(LIB).a | $(BIN_DIR)
	@printf "\n$(MAGENTA)[$(NAME)] $(DEFAULT)Linking ($(BLUE)$@$(DEFAULT))..."
	@$(CXX) $(CXXFLAGS) $^ -o $@ $(LDLIBS)
	@printf "$(CLEAR)$(MAGENTA)[$(NAME)] $(GREEN)Compilation success ðŸŽ‰!$(DEFAULT)\n"

# Static library
$(LIB_DIR)/lib$(LIB).a: $(LIB_OBJECTS) | $(LIB_DIR)
	@printf "$(MAGENTA)[lib] $(DEFAULT)Archiving ($(BLUE)$@$(DEFAULT))..."
	@ar rcs $@ $^
	@printf "$(CLEAR)$(MAGENTA)[lib] $(GREEN)Library built âœ…$(DEFAULT)\n"

# Compile objects (mirror src tree under build/obj)
$(OBJ_DIR)/%.o: src/%.cpp
	@mkdir -p $(dir $@)
	@$(eval COMPILED_FILES = $(shell expr $(COMPILED_FILES) + 1))
	@printf "$(MAGENTA)$(CLEAR)[$(NAME)] $(GREEN)[ %d/%d (%d%%) ] $(DEFAULT)Compiling " \
		$(COMPILED_FILES) $(NUM_TO_COMPILE) $(COMPILATION_PCT)
	@printf "($(BLUE)$<$(DEFAULT))..."
	@$(CXX) $(CXXFLAGS) $(INCLUDE) -c $< -o $@

# Tests: each test source -> its own binary (links against lib)
$(BIN_DIR)/tests/%: test/%.cpp $(LIB_DIR)/lib$(LIB).a
	@mkdir -p $(dir $@)
	@printf "$(MAGENTA)[tests] $(DEFAULT)Building ($(BLUE)$@$(DEFAULT)) from ($(BLUE)$<$(DEFAULT))..."
	@$(CXX) $(CXXFLAGS) $(INCLUDE) $< $(LIB_DIR)/lib$(LIB).a -o $@ $(LDLIBS)
	@printf "$(CLEAR)$(MAGENTA)[tests] $(GREEN)Built $(BLUE)$@$(DEFAULT) âœ…\n"

# Ensure top-level bin/lib dirs exist
$(BIN_DIR) $(LIB_DIR):
	@printf "$(MAGENTA)[$(NAME)] $(DEFAULT)Creating directory ($(BLUE)$@$(DEFAULT))..."
	@mkdir -p "$@"
	@printf "$(CLEAR)$(MAGENTA)[$(NAME)] $(DEFAULT)($(BLUE)$@$(DEFAULT)) Created successfully!\n"

################################################################################
##                                   CLEAN                                     ##
################################################################################
clean:
	@printf "$(MAGENTA)[$(NAME)] $(DEFAULT)Cleaning up objects files in ($(RED)$(OBJ_DIR)$(DEFAULT))..."
	@$(RM) $(OBJ_DIR)
	@printf "$(CLEAR)$(MAGENTA)[$(NAME)] $(YELLOW)Objects clean success ðŸ§¹ðŸ§¹$(DEFAULT)\n"

fclean: clean
	@printf "$(MAGENTA)[$(NAME)] $(DEFAULT)Removing build outputs ($(RED)$(BIN_DIR) $(LIB_DIR)$(DEFAULT))..."
	@$(RM) -r $(BIN_DIR) $(LIB_DIR)
	@printf "$(CLEAR)$(MAGENTA)[$(NAME)] $(YELLOW)Full clean success ðŸ§¹ðŸ§¹$(DEFAULT)\n"

re: fclean all

# Include auto-generated header dependencies
-include $(DEPS)

